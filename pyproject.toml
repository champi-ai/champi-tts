[project]
name = "champi-tts"
version = "0.1.0"
description = "Multi-provider text-to-speech library with voice reading features"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Divagnz", email = "oscar.liguori.bagnis@gmail.com"}
]
license = {text = "MIT"}
keywords = ["tts", "text-to-speech", "kokoro", "voice", "speech-synthesis", "neural-tts"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core dependencies
    "numpy",
    "sounddevice",
    "soundfile",
    "loguru",
    "blinker>=1.9.0",
    "champi-signals",
]

[project.optional-dependencies]
# Kokoro TTS provider
kokoro = [
    "torch",
    "torchaudio",
    "kokoro",
    "misaki[en,ja,ko,zh]",
    "espeak-phonemizer",
    "phonemizer-fork",
    "unidecode",
    "inflect",
    "text2num",
    "awaitlet>=0.0.1",
    "scipy",
]

# UI components
ui = [
    "imgui-bundle",
    "pyglm",
]

# CLI interface
cli = [
    "typer>=0.16.0",
    "rich>=14.0.0",
    "click>=8.0.0",
]

# All features (default for installation)
all = [
    "champi-tts[kokoro,ui,cli]",
]

# Development tools
dev = [
    "champi-tts[all]",
    "build",
    "twine",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
    "bandit[toml]>=1.7.0",
    "detect-secrets>=1.4.0",
    "uv",
    "uv-build>=0.7.21",
    "hatching",
]

# Test tools
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "coverage",
]

[project.urls]
Homepage = "https://github.com/divagnz/champi-tts"
Repository = "https://github.com/divagnz/champi-tts"
Issues = "https://github.com/divagnz/champi-tts/issues"

[project.scripts]
champi-tts = "champi_tts.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/champi_tts"]

[tool.hatch.metadata]
allow-direct-references = true

# UV configuration
[tool.uv]
package = true
no-build-isolation = false
managed = true

[tool.uv.sources]
champi-signals = { url = "https://github.com/champi-ai/champi-signals/releases/download/v0.1.0/champi_signals-0.1.0-py3-none-any.whl" }

# Linting and formatting
[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hatch
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
# Ruff configuration for linting and formatting
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "C90",  # mccabe
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",  # Don't care about booleans as positional arguments in tests
    "PLR2004", # Magic value used in comparison
    "S311", # Standard pseudo-random generators not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
known-first-party = ["champi_tts"]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kokoro.*",
    "misaki.*",
    "sounddevice.*",
    "soundfile.*",
    "imgui_bundle.*",
    "awaitlet.*",
    "torch.*",
    "inflect.*",
    "phonemizer.*",
    "scipy.*",
    "typer.*",
    "textual.*",
    "dotenv.*",
    "bs4.*",
    "requests.*",
    "PyPDF2.*",
    "fitz.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "champi_tts.providers.kokoro.adapter",
    "champi_tts.providers.kokoro.cli.*",
    "champi_tts.providers.kokoro.inference",
    "champi_tts.providers.kokoro.text_utils",
    "champi_tts.providers.kokoro.models",
    "champi_tts.providers.kokoro.provider",
]
disable_error_code = ["arg-type", "attr-defined", "no-any-return", "override", "misc", "assignment", "var-annotated", "func-returns-value", "union-attr", "has-type"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/examples/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]

# Commitizen configuration for semantic versioning
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/champi_tts/__init__.py:__version__"
]
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true
major_version_zero = true

# PyTorch CUDA support
[[tool.uv.index]]
url = "https://download.pytorch.org/whl/cu129"
